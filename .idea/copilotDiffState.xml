<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# API de Festivos - Docker Setup&#10;&#10;Esta API gestiona festivos de diferentes países usando Spring Boot, PostgreSQL y análisis de código con SonarQube.&#10;&#10;## Arquitectura&#10;&#10;- **API**: Spring Boot con arquitectura hexagonal&#10;- **Base de Datos**: PostgreSQL 15&#10;- **Análisis de Código**: SonarQube Community&#10;- **Contenedores**: Docker &amp; Docker Compose&#10;&#10;## Prerequisitos&#10;&#10;- Docker Desktop&#10;- Docker Compose&#10;- Git&#10;&#10;## Estructura del Proyecto&#10;&#10;```&#10;├── apiFestivos/           # Código fuente de la API&#10;│   ├── dominio/          # Entidades y DTOs&#10;│   ├── core/             # Interfaces de servicios&#10;│   ├── aplicacion/       # Implementación de servicios&#10;│   ├── infraestructura/  # Repositorios&#10;│   ├── presentacion/     # Controladores y configuración&#10;│   └── Dockerfile        # Imagen Docker para la API&#10;├── bd/                   # Scripts de base de datos&#10;├── docker-compose.yml    # Configuración de servicios&#10;└── Makefile             # Comandos útiles&#10;```&#10;&#10;## Servicios Incluidos&#10;&#10;| Servicio | Puerto | Descripción |&#10;|----------|--------|-------------|&#10;| api-festivos | 8080 | API REST de festivos |&#10;| postgres | 5432 | Base de datos PostgreSQL |&#10;| sonarqube | 9000 | Análisis de calidad de código |&#10;&#10;## Inicio Rápido&#10;&#10;### 1. Clonar y navegar al proyecto&#10;```bash&#10;git clone &lt;repositorio&gt;&#10;cd TT_ANI_ProyectoFestivos&#10;```&#10;&#10;### 2. Levantar servicios base&#10;```bash&#10;docker-compose up -d postgres sonarqube&#10;```&#10;&#10;### 3. Esperar inicialización (30-60 segundos)&#10;```bash&#10;# Verificar que PostgreSQL esté listo&#10;docker-compose logs postgres&#10;&#10;# Verificar que SonarQube esté listo&#10;docker-compose logs sonarqube&#10;```&#10;&#10;### 4. Levantar la API&#10;```bash&#10;docker-compose up -d api-festivos&#10;```&#10;&#10;### 5. Verificar servicios&#10;```bash&#10;# Health check de la API&#10;curl http://localhost:8080/actuator/health&#10;&#10;# Acceder a SonarQube&#10;# http://localhost:9000 (admin/admin)&#10;```&#10;&#10;## Comandos Útiles&#10;&#10;### Usando Makefile (Linux/Mac/WSL)&#10;```bash&#10;make help        # Ver todos los comandos&#10;make build       # Construir imágenes&#10;make up          # Levantar servicios&#10;make down        # Detener servicios&#10;make test        # Ejecutar pruebas&#10;make logs        # Ver logs de la API&#10;make sonar       # Análisis de SonarQube&#10;make clean       # Limpiar todo&#10;```&#10;&#10;### Usando Docker Compose directamente&#10;```bash&#10;# Construir imágenes&#10;docker-compose build&#10;&#10;# Levantar servicios&#10;docker-compose up -d&#10;&#10;# Ver logs&#10;docker-compose logs -f api-festivos&#10;&#10;# Ejecutar pruebas&#10;docker-compose exec api-festivos mvn test&#10;&#10;# Detener servicios&#10;docker-compose down&#10;&#10;# Limpiar volúmenes&#10;docker-compose down -v&#10;```&#10;&#10;## Endpoints de la API&#10;&#10;### Países&#10;- `GET /pais` - Listar todos los países&#10;- `GET /pais/{id}` - Obtener país por ID&#10;&#10;### Tipos de Festivo&#10;- `GET /tipo` - Listar todos los tipos&#10;- `GET /tipo/{id}` - Obtener tipo por ID&#10;&#10;### Festivos&#10;- `GET /festivo` - Listar todos los festivos&#10;- `GET /festivo/{id}` - Obtener festivo por ID&#10;- `GET /festivo/verificar/{año}/{mes}/{dia}` - Verificar si una fecha es festivo&#10;&#10;## Pruebas y Calidad de Código&#10;&#10;### Ejecutar Pruebas&#10;```bash&#10;# Ejecutar todas las pruebas&#10;docker-compose exec api-festivos mvn test&#10;&#10;# Ejecutar pruebas con cobertura&#10;docker-compose exec api-festivos mvn test jacoco:report&#10;```&#10;&#10;### Análisis con SonarQube&#10;&#10;1. **Configurar SonarQube** (primera vez):&#10;   ```bash&#10;   # Acceder a http://localhost:9000&#10;   # Login: admin/admin&#10;   # Cambiar contraseña si es necesario&#10;   ```&#10;&#10;2. **Ejecutar análisis**:&#10;   ```bash&#10;   # Opción 1: Usando Makefile&#10;   make sonar&#10;&#10;   # Opción 2: Usando Docker Compose&#10;   docker-compose --profile analysis up sonar-scanner&#10;   ```&#10;&#10;3. **Ver resultados**:&#10;   - Acceder a http://localhost:9000&#10;   - Ver proyecto &quot;festivos-api&quot;&#10;&#10;## Base de Datos&#10;&#10;### Conexión Local&#10;```&#10;Host: localhost&#10;Puerto: 5432&#10;Base de datos: festivos&#10;Usuario: postgres&#10;Contraseña: sa&#10;```&#10;&#10;### Estructura&#10;- **Tipo**: Tipos de festivos (Fijo, Ley Puente, etc.)&#10;- **Pais**: Países disponibles&#10;- **Festivo**: Festivos por país con reglas de cálculo&#10;&#10;## Troubleshooting&#10;&#10;### La API no se conecta a la base de datos&#10;```bash&#10;# Verificar que PostgreSQL esté ejecutándose&#10;docker-compose ps postgres&#10;&#10;# Ver logs de PostgreSQL&#10;docker-compose logs postgres&#10;&#10;# Reiniciar servicios&#10;docker-compose restart postgres api-festivos&#10;```&#10;&#10;### SonarQube no responde&#10;```bash&#10;# SonarQube necesita tiempo para inicializar&#10;docker-compose logs sonarqube&#10;&#10;# Verificar memoria disponible (SonarQube necesita ~2GB RAM)&#10;docker stats&#10;```&#10;&#10;### Limpiar y reiniciar todo&#10;```bash&#10;# Detener todo&#10;docker-compose down -v&#10;&#10;# Limpiar imágenes&#10;docker system prune -f&#10;&#10;# Reconstruir y levantar&#10;docker-compose build --no-cache&#10;docker-compose up -d&#10;```&#10;&#10;## Configuración de Desarrollo&#10;&#10;### Variables de Entorno&#10;Las siguientes variables se configuran automáticamente en Docker:&#10;&#10;```env&#10;SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/festivos&#10;SPRING_DATASOURCE_USERNAME=postgres&#10;SPRING_DATASOURCE_PASSWORD=sa&#10;SPRING_PROFILES_ACTIVE=docker&#10;```&#10;&#10;### Perfiles de Spring&#10;- `default`: Configuración local&#10;- `docker`: Configuración para contenedores&#10;&#10;## Monitoreo&#10;&#10;### Health Checks&#10;- API: http://localhost:8080/actuator/health&#10;- Base de datos: Verificación automática en Docker Compose&#10;&#10;### Logs&#10;```bash&#10;# Todos los servicios&#10;docker-compose logs&#10;&#10;# Solo la API&#10;docker-compose logs api-festivos&#10;&#10;# Seguir logs en tiempo real&#10;docker-compose logs -f&#10;```&#10;" />
              <option name="updatedContent" value="# API de Festivos - Docker Setup&#10;&#10;Esta API gestiona festivos de diferentes países usando Spring Boot, PostgreSQL y análisis de código con SonarQube.&#10;&#10;## Arquitectura&#10;&#10;- **API**: Spring Boot con arquitectura hexagonal&#10;- **Base de Datos**: PostgreSQL 15&#10;- **Análisis de Código**: SonarQube Community&#10;- **Cobertura de Código**: JaCoCo&#10;- **Contenedores**: Docker &amp; Docker Compose&#10;&#10;## Prerequisitos&#10;&#10;- Docker Desktop&#10;- Docker Compose&#10;- Git&#10;&#10;## Estructura del Proyecto&#10;&#10;```&#10;├── apiFestivos/           # Código fuente de la API&#10;│   ├── dominio/          # Entidades y DTOs&#10;│   ├── core/             # Interfaces de servicios&#10;│   ├── aplicacion/       # Implementación de servicios&#10;│   ├── infraestructura/  # Repositorios&#10;│   ├── presentacion/     # Controladores y configuración&#10;│   └── Dockerfile        # Imagen Docker para la API&#10;├── bd/                   # Scripts de base de datos&#10;├── docker-compose.yml    # Configuración de servicios&#10;└── Makefile             # Comandos útiles&#10;```&#10;&#10;## Servicios Incluidos&#10;&#10;| Servicio | Puerto | Descripción |&#10;|----------|--------|-------------|&#10;| api-festivos | 8080 | API REST de festivos |&#10;| postgres | 5432 | Base de datos PostgreSQL |&#10;| sonarqube | 9000 | Análisis de calidad de código |&#10;&#10;## Inicio Rápido&#10;&#10;### 1. Clonar y navegar al proyecto&#10;```bash&#10;git clone &lt;repositorio&gt;&#10;cd TT_ANI_ProyectoFestivos&#10;```&#10;&#10;### 2. Levantar servicios base&#10;```bash&#10;docker-compose up -d postgres sonarqube&#10;```&#10;&#10;### 3. Esperar inicialización (30-60 segundos)&#10;```bash&#10;# Verificar que PostgreSQL esté listo&#10;docker-compose logs postgres&#10;&#10;# Verificar que SonarQube esté listo&#10;docker-compose logs sonarqube&#10;```&#10;&#10;### 4. Levantar la API&#10;```bash&#10;docker-compose up -d api-festivos&#10;```&#10;&#10;### 5. Verificar servicios&#10;```bash&#10;# Health check de la API&#10;curl http://localhost:8080/actuator/health&#10;&#10;# Acceder a SonarQube&#10;# http://localhost:9000 (admin/admin)&#10;```&#10;&#10;## Pruebas y Calidad de Código&#10;&#10;### Configuración de Cobertura de Código&#10;&#10;El proyecto está configurado con **JaCoCo** para generar reportes de cobertura en proyectos multi-módulo:&#10;&#10;#### Configuración en POM padre (`pom.xml`)&#10;```xml&#10;&lt;properties&gt;&#10;    &lt;jacoco.version&gt;0.8.10&lt;/jacoco.version&gt;&#10;    &lt;!-- Configuración para SonarQube multi-módulo --&gt;&#10;    &lt;sonar.java.coveragePlugin&gt;jacoco&lt;/sonar.java.coveragePlugin&gt;&#10;    &lt;sonar.coverage.jacoco.xmlReportPaths&gt;&#10;        **/target/site/jacoco/jacoco.xml,&#10;        **/target/site/jacoco-aggregate/jacoco.xml&#10;    &lt;/sonar.coverage.jacoco.xmlReportPaths&gt;&#10;&lt;/properties&gt;&#10;&#10;&lt;build&gt;&#10;    &lt;plugins&gt;&#10;        &lt;plugin&gt;&#10;            &lt;groupId&gt;org.jacoco&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;&#10;            &lt;version&gt;${jacoco.version}&lt;/version&gt;&#10;            &lt;executions&gt;&#10;                &lt;execution&gt;&#10;                    &lt;id&gt;prepare-agent&lt;/id&gt;&#10;                    &lt;goals&gt;&#10;                        &lt;goal&gt;prepare-agent&lt;/goal&gt;&#10;                    &lt;/goals&gt;&#10;                &lt;/execution&gt;&#10;                &lt;execution&gt;&#10;                    &lt;id&gt;report&lt;/id&gt;&#10;                    &lt;phase&gt;test&lt;/phase&gt;&#10;                    &lt;goals&gt;&#10;                        &lt;goal&gt;report&lt;/goal&gt;&#10;                    &lt;/goals&gt;&#10;                &lt;/execution&gt;&#10;                &lt;execution&gt;&#10;                    &lt;id&gt;report-aggregate&lt;/id&gt;&#10;                    &lt;phase&gt;verify&lt;/phase&gt;&#10;                    &lt;goals&gt;&#10;                        &lt;goal&gt;report-aggregate&lt;/goal&gt;&#10;                    &lt;/goals&gt;&#10;                &lt;/execution&gt;&#10;            &lt;/executions&gt;&#10;        &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;&lt;/build&gt;&#10;```&#10;&#10;### Ejecutar Pruebas con Cobertura&#10;&#10;#### Opción 1: Maven Local&#10;```bash&#10;# Ejecutar todas las pruebas con cobertura&#10;cd apiFestivos&#10;mvn clean verify&#10;&#10;# Solo pruebas (sin agregación)&#10;mvn clean test&#10;&#10;# Generar reportes agregados de cobertura&#10;mvn clean verify jacoco:report-aggregate&#10;```&#10;&#10;#### Opción 2: Docker&#10;```bash&#10;# Ejecutar todas las pruebas&#10;docker-compose exec api-festivos mvn clean verify&#10;&#10;# Solo pruebas unitarias&#10;docker-compose exec api-festivos mvn test&#10;&#10;# Ver reportes de cobertura&#10;docker-compose exec api-festivos find . -name &quot;jacoco.xml&quot; -type f&#10;```&#10;&#10;### Ubicación de Reportes de Cobertura&#10;&#10;Los reportes se generan en las siguientes ubicaciones:&#10;&#10;```&#10;apiFestivos/&#10;├── aplicacion/target/site/jacoco/          # Reporte individual del módulo aplicacion&#10;├── presentacion/target/site/jacoco/        # Reporte individual del módulo presentacion&#10;├── aplicacion/target/site/jacoco-aggregate/ # Reporte agregado desde aplicacion&#10;├── presentacion/target/site/jacoco-aggregate/ # Reporte agregado desde presentacion&#10;└── target/site/jacoco-aggregate/           # Reporte agregado principal&#10;```&#10;&#10;**Archivos importantes:**&#10;- `jacoco.xml` - Reporte en formato XML para SonarQube&#10;- `index.html` - Reporte visual HTML&#10;- `jacoco.exec` - Datos de ejecución binarios&#10;&#10;### Análisis con SonarQube&#10;&#10;#### 1. Configuración Inicial de SonarQube&#10;&#10;**Primera configuración:**&#10;```bash&#10;# Levantar SonarQube&#10;docker-compose up -d sonarqube&#10;&#10;# Esperar inicialización (2-3 minutos)&#10;docker-compose logs -f sonarqube&#10;&#10;# Acceder a la interfaz web&#10;# URL: http://localhost:9000&#10;# Usuario: admin&#10;# Contraseña: admin (cambiar en primer acceso)&#10;```&#10;&#10;#### 2. Configurar Proyecto en SonarQube&#10;&#10;1. **Crear nuevo proyecto:**&#10;   - Acceder a http://localhost:9000&#10;   - Click en &quot;Create Project&quot; → &quot;Manually&quot;&#10;   - Project key: `festivos-api`&#10;   - Display name: `API Festivos`&#10;&#10;2. **Generar token:**&#10;   - Click en &quot;Generate Token&quot;&#10;   - Nombre: `festivos-api-token`&#10;   - Copiar y guardar el token generado&#10;&#10;#### 3. Ejecutar Análisis de SonarQube&#10;&#10;**Con Maven local:**&#10;```bash&#10;cd apiFestivos&#10;&#10;# Ejecutar análisis completo con cobertura&#10;mvn clean verify sonar:sonar \&#10;  -Dsonar.projectKey=festivos-api \&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#10;  -Dsonar.projectVersion=1.0 \&#10;  -Dsonar.host.url=http://localhost:9000 \&#10;  -Dsonar.token=TU_TOKEN_AQUI&#10;```&#10;&#10;**Con Docker:**&#10;```bash&#10;# Ejecutar análisis desde el contenedor&#10;docker-compose exec api-festivos mvn clean verify sonar:sonar \&#10;  -Dsonar.projectKey=festivos-api \&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#10;  -Dsonar.projectVersion=1.0 \&#10;  -Dsonar.host.url=http://sonarqube:9000 \&#10;  -Dsonar.token=TU_TOKEN_AQUI&#10;```&#10;&#10;**Usando variables de entorno:**&#10;```bash&#10;# Configurar variables&#10;export SONAR_TOKEN=tu_token_aqui&#10;export SONAR_PROJECT_KEY=festivos-api&#10;&#10;# Ejecutar análisis&#10;mvn clean verify sonar:sonar \&#10;  -Dsonar.projectKey=$SONAR_PROJECT_KEY \&#10;  -Dsonar.host.url=http://localhost:9000 \&#10;  -Dsonar.token=$SONAR_TOKEN&#10;```&#10;&#10;#### 4. Interpretar Resultados&#10;&#10;**Métricas principales:**&#10;- **Coverage**: Porcentaje de código cubierto por pruebas&#10;- **Lines of Code**: Líneas de código analizadas&#10;- **Bugs**: Problemas que pueden causar errores&#10;- **Vulnerabilities**: Problemas de seguridad&#10;- **Code Smells**: Problemas de mantenibilidad&#10;- **Duplications**: Código duplicado&#10;&#10;**Acceder a resultados:**&#10;- Dashboard: http://localhost:9000/dashboard?id=festivos-api&#10;- Ver detalles por módulo, archivo y línea&#10;- Métricas históricas y tendencias&#10;&#10;### Integración Continua&#10;&#10;#### Script de Análisis Automatizado&#10;&#10;Crear archivo `scripts/analyze.sh`:&#10;```bash&#10;#!/bin/bash&#10;set -e&#10;&#10;echo &quot; Iniciando análisis de código...&quot;&#10;&#10;# Ejecutar pruebas con cobertura&#10;echo &quot; Ejecutando pruebas con cobertura...&quot;&#10;mvn clean verify&#10;&#10;# Verificar que los reportes existen&#10;echo &quot; Verificando reportes de cobertura...&quot;&#10;find . -name &quot;jacoco.xml&quot; -type f&#10;&#10;# Ejecutar análisis de SonarQube&#10;echo &quot; Ejecutando análisis de SonarQube...&quot;&#10;mvn sonar:sonar \&#10;  -Dsonar.projectKey=festivos-api \&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#10;  -Dsonar.projectVersion=1.0 \&#10;  -Dsonar.host.url=http://localhost:9000 \&#10;  -Dsonar.token=${SONAR_TOKEN}&#10;&#10;echo &quot;✅ Análisis completado. Ver resultados en: http://localhost:9000&quot;&#10;```&#10;&#10;#### Makefile Actualizado&#10;&#10;```makefile&#10;# Análisis de código&#10;.PHONY: test-coverage sonar analyze&#10;&#10;test-coverage: ## Ejecutar pruebas con cobertura&#10;&#9;cd apiFestivos &amp;&amp; mvn clean verify&#10;&#10;sonar: ## Ejecutar análisis de SonarQube&#10;&#9;cd apiFestivos &amp;&amp; mvn sonar:sonar \&#10;&#9;&#9;-Dsonar.projectKey=festivos-api \&#10;&#9;&#9;-Dsonar.host.url=http://localhost:9000 \&#10;&#9;&#9;-Dsonar.token=${SONAR_TOKEN}&#10;&#10;analyze: test-coverage sonar ## Ejecutar análisis completo (pruebas + SonarQube)&#10;```&#10;&#10;### Solución de Problemas&#10;&#10;#### Cobertura en 0.0%&#10;&#10;Si SonarQube muestra 0% de cobertura:&#10;&#10;1. **Verificar reportes generados:**&#10;   ```bash&#10;   find apiFestivos -name &quot;jacoco.xml&quot; -type f&#10;   find apiFestivos -name &quot;jacoco.exec&quot; -type f&#10;   ```&#10;&#10;2. **Verificar configuración de rutas:**&#10;   ```bash&#10;   # Verificar en logs de SonarQube&#10;   grep -i &quot;jacoco&quot; apiFestivos/target/sonar/report-task.txt&#10;   ```&#10;&#10;3. **Regenerar reportes:**&#10;   ```bash&#10;   cd apiFestivos&#10;   mvn clean verify&#10;   mvn jacoco:report-aggregate&#10;   ```&#10;&#10;#### SonarQube no encuentra reportes&#10;&#10;1. **Verificar configuración en POM:**&#10;   ```xml&#10;   &lt;sonar.coverage.jacoco.xmlReportPaths&gt;&#10;       **/target/site/jacoco/jacoco.xml,&#10;       **/target/site/jacoco-aggregate/jacoco.xml&#10;   &lt;/sonar.coverage.jacoco.xmlReportPaths&gt;&#10;   ```&#10;&#10;2. **Usar rutas absolutas:**&#10;   ```bash&#10;   mvn sonar:sonar -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco-aggregate/jacoco.xml&#10;   ```&#10;&#10;#### Problemas de Memoria&#10;&#10;Si SonarQube falla por memoria:&#10;```bash&#10;# Aumentar memoria de Docker&#10;# Docker Desktop → Settings → Resources → Memory: 4GB+&#10;&#10;# Verificar memoria disponible&#10;docker stats sonarqube&#10;```&#10;&#10;### Métricas de Calidad Recomendadas&#10;&#10;**Objetivos de cobertura:**&#10;- **Cobertura mínima**: 80%&#10;- **Cobertura objetivo**: 90%&#10;- **Cobertura crítica**: 95% (servicios core)&#10;&#10;**Umbrales de calidad:**&#10;- **Bugs**: 0&#10;- **Vulnerabilities**: 0&#10;- **Code Smells**: &lt; 10 por 1000 líneas&#10;- **Duplications**: &lt; 3%&#10;&#10;## Comandos Útiles&#10;&#10;### Usando Makefile (Linux/Mac/WSL)&#10;```bash&#10;make help        # Ver todos los comandos&#10;make build       # Construir imágenes&#10;make up          # Levantar servicios&#10;make down        # Detener servicios&#10;make test        # Ejecutar pruebas&#10;make test-coverage # Ejecutar pruebas con cobertura&#10;make sonar       # Análisis de SonarQube&#10;make analyze     # Análisis completo (pruebas + SonarQube)&#10;make logs        # Ver logs de la API&#10;make clean       # Limpiar todo&#10;```&#10;&#10;### Usando Docker Compose directamente&#10;```bash&#10;# Construir imágenes&#10;docker-compose build&#10;&#10;# Levantar servicios&#10;docker-compose up -d&#10;&#10;# Ver logs&#10;docker-compose logs -f api-festivos&#10;&#10;# Ejecutar pruebas con cobertura&#10;docker-compose exec api-festivos mvn clean verify&#10;&#10;# Ejecutar análisis de SonarQube&#10;docker-compose exec api-festivos mvn sonar:sonar \&#10;  -Dsonar.projectKey=festivos-api \&#10;  -Dsonar.host.url=http://sonarqube:9000 \&#10;  -Dsonar.token=TU_TOKEN&#10;&#10;# Detener servicios&#10;docker-compose down&#10;&#10;# Limpiar volúmenes&#10;docker-compose down -v&#10;```&#10;&#10;## Endpoints de la API&#10;&#10;### Países&#10;- `GET /pais` - Listar todos los países&#10;- `GET /pais/{id}` - Obtener país por ID&#10;&#10;### Tipos de Festivo&#10;- `GET /tipo` - Listar todos los tipos&#10;- `GET /tipo/{id}` - Obtener tipo por ID&#10;&#10;### Festivos&#10;- `GET /festivo` - Listar todos los festivos&#10;- `GET /festivo/{id}` - Obtener festivo por ID&#10;- `GET /festivo/verificar/{año}/{mes}/{dia}` - Verificar si una fecha es festivo&#10;&#10;## Base de Datos&#10;&#10;### Conexión Local&#10;```&#10;Host: localhost&#10;Puerto: 5432&#10;Base de datos: festivos&#10;Usuario: postgres&#10;Contraseña: sa&#10;```&#10;&#10;### Estructura&#10;- **Tipo**: Tipos de festivos (Fijo, Ley Puente, etc.)&#10;- **Pais**: Países disponibles&#10;- **Festivo**: Festivos por país con reglas de cálculo&#10;&#10;## Troubleshooting&#10;&#10;### La API no se conecta a la base de datos&#10;```bash&#10;# Verificar que PostgreSQL esté ejecutándose&#10;docker-compose ps postgres&#10;&#10;# Ver logs de PostgreSQL&#10;docker-compose logs postgres&#10;&#10;# Reiniciar servicios&#10;docker-compose restart postgres api-festivos&#10;```&#10;&#10;### SonarQube no responde&#10;```bash&#10;# SonarQube necesita tiempo para inicializar&#10;docker-compose logs sonarqube&#10;&#10;# Verificar memoria disponible (SonarQube necesita ~2GB RAM)&#10;docker stats&#10;```&#10;&#10;### Limpiar y reiniciar todo&#10;```bash&#10;# Detener todo&#10;docker-compose down -v&#10;&#10;# Limpiar imágenes&#10;docker system prune -f&#10;&#10;# Reconstruir y levantar&#10;docker-compose build --no-cache&#10;docker-compose up -d&#10;```&#10;&#10;## Configuración de Desarrollo&#10;&#10;### Variables de Entorno&#10;Las siguientes variables se configuran automáticamente en Docker:&#10;&#10;```env&#10;SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/festivos&#10;SPRING_DATASOURCE_USERNAME=postgres&#10;SPRING_DATASOURCE_PASSWORD=sa&#10;SPRING_PROFILES_ACTIVE=docker&#10;```&#10;&#10;### Perfiles de Spring&#10;- `default`: Configuración local&#10;- `docker`: Configuración para contenedores&#10;&#10;## Monitoreo&#10;&#10;### Health Checks&#10;- API: http://localhost:8080/actuator/health&#10;- Base de datos: Verificación automática en Docker Compose&#10;&#10;### Logs&#10;```bash&#10;# Todos los servicios&#10;docker-compose logs&#10;&#10;# Solo la API&#10;docker-compose logs api-festivos&#10;&#10;# Seguir logs en tiempo real&#10;docker-compose logs -f&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/aplicacion/src/test/java/servicios/FestivoServicioTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/aplicacion/src/test/java/servicios/FestivoServicioTest.java" />
              <option name="originalContent" value="package festivos.api.aplicacion.servicios;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.data.domain.Sort;&#10;&#10;import festivos.api.dominio.entidades.Festivo;&#10;import festivos.api.dominio.entidades.Pais;&#10;import festivos.api.dominio.entidades.Tipo;&#10;import festivos.api.infraestructura.repositorios.IFestivoRepositorio;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class FestivoServicioTest {&#10;&#10;    @Mock&#10;    private IFestivoRepositorio repositorio;&#10;&#10;    @InjectMocks&#10;    private FestivoServicio festivoServicio;&#10;&#10;    private Festivo festivo;&#10;    private Pais pais;&#10;    private Tipo tipo;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        pais = new Pais();&#10;        pais.setId(1);&#10;        pais.setNombre(&quot;Colombia&quot;);&#10;&#10;        tipo = new Tipo();&#10;        tipo.setId(1);&#10;        tipo.setNombre(&quot;Fijo&quot;);&#10;&#10;        festivo = new Festivo();&#10;        festivo.setId(1);&#10;        festivo.setNombre(&quot;Año Nuevo&quot;);&#10;        festivo.setDia(1);&#10;        festivo.setMes(1);&#10;        festivo.setPais(pais);&#10;        festivo.setTipo(tipo);&#10;    }&#10;&#10;    @Test&#10;    void testListar() {&#10;        // Given&#10;        List&lt;Festivo&gt; festivos = Arrays.asList(festivo);&#10;        when(repositorio.findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;))).thenReturn(festivos);&#10;&#10;        // When&#10;        List&lt;Festivo&gt; resultado = festivoServicio.listar();&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        assertEquals(&quot;Año Nuevo&quot;, resultado.get(0).getNombre());&#10;        verify(repositorio).findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testObtenerExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(festivo));&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.obtener(1);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Año Nuevo&quot;, resultado.getNombre());&#10;        verify(repositorio, times(2)).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void testObtenerNoExistente() {&#10;        // Given&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.obtener(99);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio, times(2)).findById(99);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() {&#10;        // Given&#10;        List&lt;Festivo&gt; festivos = Arrays.asList(festivo);&#10;        when(repositorio.buscar(&quot;Año&quot;)).thenReturn(festivos);&#10;&#10;        // When&#10;        List&lt;Festivo&gt; resultado = festivoServicio.buscar(&quot;Año&quot;);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        verify(repositorio).buscar(&quot;Año&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() {&#10;        // Given&#10;        Festivo nuevoFestivo = new Festivo();&#10;        nuevoFestivo.setNombre(&quot;Nuevo Festivo&quot;);&#10;        when(repositorio.save(any(Festivo.class))).thenReturn(nuevoFestivo);&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.agregar(nuevoFestivo);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(0, nuevoFestivo.getId()); // Verifica que se estableció el ID en 0&#10;        verify(repositorio).save(nuevoFestivo);&#10;    }&#10;&#10;    @Test&#10;    void testModificarExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(festivo));&#10;        when(repositorio.save(festivo)).thenReturn(festivo);&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.modificar(festivo);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Año Nuevo&quot;, resultado.getNombre());&#10;        verify(repositorio).findById(1);&#10;        verify(repositorio).save(festivo);&#10;    }&#10;&#10;    @Test&#10;    void testModificarNoExistente() {&#10;        // Given&#10;        festivo.setId(99);&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.modificar(festivo);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;        verify(repositorio, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void testEliminarExitoso() {&#10;        // Given&#10;        doNothing().when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = festivoServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertTrue(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void testEliminarConExcepcion() {&#10;        // Given&#10;        doThrow(new RuntimeException(&quot;Error&quot;)).when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = festivoServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertFalse(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void testVerificarFechaEsFestivo() {&#10;        // Given&#10;        LocalDate fecha = LocalDate.of(2024, 1, 1);&#10;        List&lt;Festivo&gt; festivos = Arrays.asList(festivo);&#10;        when(repositorio.listarPorPais(1)).thenReturn(festivos);&#10;&#10;        // When&#10;        boolean resultado = festivoServicio.verificar(1, fecha);&#10;&#10;        // Then&#10;        assertTrue(resultado);&#10;        verify(repositorio).listarPorPais(1);&#10;    }&#10;&#10;    @Test&#10;    void testVerificarFechaNoEsFestivo() {&#10;        // Given&#10;        LocalDate fecha = LocalDate.of(2024, 12, 25);&#10;        List&lt;Festivo&gt; festivos = Arrays.asList(festivo);&#10;        when(repositorio.listarPorPais(1)).thenReturn(festivos);&#10;&#10;        // When&#10;        boolean resultado = festivoServicio.verificar(1, fecha);&#10;&#10;        // Then&#10;        assertFalse(resultado);&#10;        verify(repositorio).listarPorPais(1);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package festivos.api.aplicacion.servicios;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.data.domain.Sort;&#10;&#10;import festivos.api.dominio.entidades.Festivo;&#10;import festivos.api.dominio.entidades.Pais;&#10;import festivos.api.dominio.entidades.Tipo;&#10;import festivos.api.infraestructura.repositorios.IFestivoRepositorio;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class FestivoServicioTest {&#10;&#10;    @Mock&#10;    private IFestivoRepositorio repositorio;&#10;&#10;    @InjectMocks&#10;    private FestivoServicio festivoServicio;&#10;&#10;    private Festivo festivo;&#10;    private Pais pais;&#10;    private Tipo tipo;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        pais = new Pais();&#10;        pais.setId(1);&#10;        pais.setNombre(&quot;Colombia&quot;);&#10;&#10;        tipo = new Tipo();&#10;        tipo.setId(1);&#10;        tipo.setNombre(&quot;Fijo&quot;);&#10;&#10;        festivo = new Festivo();&#10;        festivo.setId(1);&#10;        festivo.setNombre(&quot;Año Nuevo&quot;);&#10;        festivo.setDia(1);&#10;        festivo.setMes(1);&#10;        festivo.setPais(pais);&#10;        festivo.setTipo(tipo);&#10;    }&#10;&#10;    @Test&#10;    void testListar() {&#10;        // Given&#10;        List&lt;Festivo&gt; festivos = Arrays.asList(festivo);&#10;        when(repositorio.findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;))).thenReturn(festivos);&#10;&#10;        // When&#10;        List&lt;Festivo&gt; resultado = festivoServicio.listar();&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        assertEquals(&quot;Año Nuevo&quot;, resultado.get(0).getNombre());&#10;        verify(repositorio).findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testObtenerExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(festivo));&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.obtener(1);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Año Nuevo&quot;, resultado.getNombre());&#10;        verify(repositorio, times(2)).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void testObtenerNoExistente() {&#10;        // Given&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.obtener(99);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() {&#10;        // Given&#10;        List&lt;Festivo&gt; festivos = Arrays.asList(festivo);&#10;        when(repositorio.buscar(&quot;Año&quot;)).thenReturn(festivos);&#10;&#10;        // When&#10;        List&lt;Festivo&gt; resultado = festivoServicio.buscar(&quot;Año&quot;);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        verify(repositorio).buscar(&quot;Año&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() {&#10;        // Given&#10;        Festivo nuevoFestivo = new Festivo();&#10;        nuevoFestivo.setNombre(&quot;Nuevo Festivo&quot;);&#10;        when(repositorio.save(any(Festivo.class))).thenReturn(nuevoFestivo);&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.agregar(nuevoFestivo);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(0, nuevoFestivo.getId()); // Verifica que se estableció el ID en 0&#10;        verify(repositorio).save(nuevoFestivo);&#10;    }&#10;&#10;    @Test&#10;    void testModificarExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(festivo));&#10;        when(repositorio.save(festivo)).thenReturn(festivo);&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.modificar(festivo);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Año Nuevo&quot;, resultado.getNombre());&#10;        verify(repositorio).findById(1);&#10;        verify(repositorio).save(festivo);&#10;    }&#10;&#10;    @Test&#10;    void testModificarNoExistente() {&#10;        // Given&#10;        festivo.setId(99);&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Festivo resultado = festivoServicio.modificar(festivo);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;        verify(repositorio, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void testEliminarExitoso() {&#10;        // Given&#10;        doNothing().when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = festivoServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertTrue(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void testEliminarConExcepcion() {&#10;        // Given&#10;        doThrow(new RuntimeException(&quot;Error&quot;)).when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = festivoServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertFalse(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void testVerificarFechaEsFestivo() {&#10;        // Given&#10;        LocalDate fecha = LocalDate.of(2024, 1, 1);&#10;        List&lt;Festivo&gt; festivos = Arrays.asList(festivo);&#10;        when(repositorio.listarPorPais(1)).thenReturn(festivos);&#10;&#10;        // When&#10;        boolean resultado = festivoServicio.verificar(1, fecha);&#10;&#10;        // Then&#10;        assertTrue(resultado);&#10;        verify(repositorio).listarPorPais(1);&#10;    }&#10;&#10;    @Test&#10;    void testVerificarFechaNoEsFestivo() {&#10;        // Given&#10;        LocalDate fecha = LocalDate.of(2024, 12, 25);&#10;        List&lt;Festivo&gt; festivos = Arrays.asList(festivo);&#10;        when(repositorio.listarPorPais(1)).thenReturn(festivos);&#10;&#10;        // When&#10;        boolean resultado = festivoServicio.verificar(1, fecha);&#10;&#10;        // Then&#10;        assertFalse(resultado);&#10;        verify(repositorio).listarPorPais(1);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/aplicacion/src/test/java/servicios/PaisServicioTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/aplicacion/src/test/java/servicios/PaisServicioTest.java" />
              <option name="originalContent" value="package festivos.api.aplicacion.servicios;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.data.domain.Sort;&#10;&#10;import festivos.api.dominio.entidades.Pais;&#10;import festivos.api.infraestructura.repositorios.IPaisRepositorio;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class PaisServicioTest {&#10;&#10;    @Mock&#10;    private IPaisRepositorio repositorio;&#10;&#10;    @InjectMocks&#10;    private PaisServicio paisServicio;&#10;&#10;    private Pais pais;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        pais = new Pais();&#10;        pais.setId(1);&#10;        pais.setNombre(&quot;Colombia&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testListar() {&#10;        // Given&#10;        List&lt;Pais&gt; paises = Arrays.asList(pais);&#10;        when(repositorio.findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;))).thenReturn(paises);&#10;&#10;        // When&#10;        List&lt;Pais&gt; resultado = paisServicio.listar();&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        assertEquals(&quot;Colombia&quot;, resultado.get(0).getNombre());&#10;        verify(repositorio).findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testObtenerExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(pais));&#10;&#10;        // When&#10;        Pais resultado = paisServicio.obtener(1);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Colombia&quot;, resultado.getNombre());&#10;        verify(repositorio, times(2)).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void testObtenerNoExistente() {&#10;        // Given&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Pais resultado = paisServicio.obtener(99);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio, times(2)).findById(99);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() {&#10;        // Given&#10;        List&lt;Pais&gt; paises = Arrays.asList(pais);&#10;        when(repositorio.buscar(&quot;Colombia&quot;)).thenReturn(paises);&#10;&#10;        // When&#10;        List&lt;Pais&gt; resultado = paisServicio.buscar(&quot;Colombia&quot;);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        verify(repositorio).buscar(&quot;Colombia&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() {&#10;        // Given&#10;        Pais nuevoPais = new Pais();&#10;        nuevoPais.setNombre(&quot;Argentina&quot;);&#10;        when(repositorio.save(any(Pais.class))).thenReturn(nuevoPais);&#10;&#10;        // When&#10;        Pais resultado = paisServicio.agregar(nuevoPais);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(0, nuevoPais.getId());&#10;        verify(repositorio).save(nuevoPais);&#10;    }&#10;&#10;    @Test&#10;    void testModificarExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(pais));&#10;        when(repositorio.save(pais)).thenReturn(pais);&#10;&#10;        // When&#10;        Pais resultado = paisServicio.modificar(pais);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Colombia&quot;, resultado.getNombre());&#10;        verify(repositorio).findById(1);&#10;        verify(repositorio).save(pais);&#10;    }&#10;&#10;    @Test&#10;    void testModificarNoExistente() {&#10;        // Given&#10;        pais.setId(99);&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Pais resultado = paisServicio.modificar(pais);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;        verify(repositorio, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void testEliminarExitoso() {&#10;        // Given&#10;        doNothing().when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = paisServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertTrue(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void testEliminarConExcepcion() {&#10;        // Given&#10;        doThrow(new RuntimeException(&quot;Error&quot;)).when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = paisServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertFalse(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package festivos.api.aplicacion.servicios;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.data.domain.Sort;&#10;&#10;import festivos.api.dominio.entidades.Pais;&#10;import festivos.api.infraestructura.repositorios.IPaisRepositorio;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class PaisServicioTest {&#10;&#10;    @Mock&#10;    private IPaisRepositorio repositorio;&#10;&#10;    @InjectMocks&#10;    private PaisServicio paisServicio;&#10;&#10;    private Pais pais;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        pais = new Pais();&#10;        pais.setId(1);&#10;        pais.setNombre(&quot;Colombia&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testListar() {&#10;        // Given&#10;        List&lt;Pais&gt; paises = Arrays.asList(pais);&#10;        when(repositorio.findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;))).thenReturn(paises);&#10;&#10;        // When&#10;        List&lt;Pais&gt; resultado = paisServicio.listar();&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        assertEquals(&quot;Colombia&quot;, resultado.get(0).getNombre());&#10;        verify(repositorio).findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testObtenerExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(pais));&#10;&#10;        // When&#10;        Pais resultado = paisServicio.obtener(1);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Colombia&quot;, resultado.getNombre());&#10;        verify(repositorio, times(2)).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void testObtenerNoExistente() {&#10;        // Given&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Pais resultado = paisServicio.obtener(99);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() {&#10;        // Given&#10;        List&lt;Pais&gt; paises = Arrays.asList(pais);&#10;        when(repositorio.buscar(&quot;Colombia&quot;)).thenReturn(paises);&#10;&#10;        // When&#10;        List&lt;Pais&gt; resultado = paisServicio.buscar(&quot;Colombia&quot;);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        verify(repositorio).buscar(&quot;Colombia&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() {&#10;        // Given&#10;        Pais nuevoPais = new Pais();&#10;        nuevoPais.setNombre(&quot;Argentina&quot;);&#10;        when(repositorio.save(any(Pais.class))).thenReturn(nuevoPais);&#10;&#10;        // When&#10;        Pais resultado = paisServicio.agregar(nuevoPais);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(0, nuevoPais.getId());&#10;        verify(repositorio).save(nuevoPais);&#10;    }&#10;&#10;    @Test&#10;    void testModificarExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(pais));&#10;        when(repositorio.save(pais)).thenReturn(pais);&#10;&#10;        // When&#10;        Pais resultado = paisServicio.modificar(pais);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Colombia&quot;, resultado.getNombre());&#10;        verify(repositorio).findById(1);&#10;        verify(repositorio).save(pais);&#10;    }&#10;&#10;    @Test&#10;    void testModificarNoExistente() {&#10;        // Given&#10;        pais.setId(99);&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Pais resultado = paisServicio.modificar(pais);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;        verify(repositorio, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void testEliminarExitoso() {&#10;        // Given&#10;        doNothing().when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = paisServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertTrue(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void testEliminarConExcepcion() {&#10;        // Given&#10;        doThrow(new RuntimeException(&quot;Error&quot;)).when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = paisServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertFalse(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/aplicacion/src/test/java/servicios/TipoServicioTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/aplicacion/src/test/java/servicios/TipoServicioTest.java" />
              <option name="originalContent" value="package festivos.api.aplicacion.servicios;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.data.domain.Sort;&#10;&#10;import festivos.api.dominio.entidades.Tipo;&#10;import festivos.api.infraestructura.repositorios.ITipoRepositorio;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class TipoServicioTest {&#10;&#10;    @Mock&#10;    private ITipoRepositorio repositorio;&#10;&#10;    @InjectMocks&#10;    private TipoServicio tipoServicio;&#10;&#10;    private Tipo tipo;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        tipo = new Tipo();&#10;        tipo.setId(1);&#10;        tipo.setNombre(&quot;Fijo&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testListar() {&#10;        // Given&#10;        List&lt;Tipo&gt; tipos = Arrays.asList(tipo);&#10;        when(repositorio.findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;))).thenReturn(tipos);&#10;&#10;        // When&#10;        List&lt;Tipo&gt; resultado = tipoServicio.listar();&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        assertEquals(&quot;Fijo&quot;, resultado.get(0).getNombre());&#10;        verify(repositorio).findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testObtenerExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(tipo));&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.obtener(1);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Fijo&quot;, resultado.getNombre());&#10;        verify(repositorio, times(2)).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void testObtenerNoExistente() {&#10;        // Given&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.obtener(99);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio, times(2)).findById(99);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() {&#10;        // Given&#10;        List&lt;Tipo&gt; tipos = Arrays.asList(tipo);&#10;        when(repositorio.buscar(&quot;Fijo&quot;)).thenReturn(tipos);&#10;&#10;        // When&#10;        List&lt;Tipo&gt; resultado = tipoServicio.buscar(&quot;Fijo&quot;);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        verify(repositorio).buscar(&quot;Fijo&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() {&#10;        // Given&#10;        Tipo nuevoTipo = new Tipo();&#10;        nuevoTipo.setNombre(&quot;Variable&quot;);&#10;        when(repositorio.save(any(Tipo.class))).thenReturn(nuevoTipo);&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.agregar(nuevoTipo);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(0, nuevoTipo.getId());&#10;        verify(repositorio).save(nuevoTipo);&#10;    }&#10;&#10;    @Test&#10;    void testModificarExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(tipo));&#10;        when(repositorio.save(tipo)).thenReturn(tipo);&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.modificar(tipo);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Fijo&quot;, resultado.getNombre());&#10;        verify(repositorio).findById(1);&#10;        verify(repositorio).save(tipo);&#10;    }&#10;&#10;    @Test&#10;    void testModificarNoExistente() {&#10;        // Given&#10;        tipo.setId(99);&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.modificar(tipo);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;        verify(repositorio, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void testEliminarExitoso() {&#10;        // Given&#10;        doNothing().when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = tipoServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertTrue(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void testEliminarConExcepcion() {&#10;        // Given&#10;        doThrow(new RuntimeException(&quot;Error&quot;)).when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = tipoServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertFalse(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package festivos.api.aplicacion.servicios;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.data.domain.Sort;&#10;&#10;import festivos.api.dominio.entidades.Tipo;&#10;import festivos.api.infraestructura.repositorios.ITipoRepositorio;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class TipoServicioTest {&#10;&#10;    @Mock&#10;    private ITipoRepositorio repositorio;&#10;&#10;    @InjectMocks&#10;    private TipoServicio tipoServicio;&#10;&#10;    private Tipo tipo;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        tipo = new Tipo();&#10;        tipo.setId(1);&#10;        tipo.setNombre(&quot;Fijo&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testListar() {&#10;        // Given&#10;        List&lt;Tipo&gt; tipos = Arrays.asList(tipo);&#10;        when(repositorio.findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;))).thenReturn(tipos);&#10;&#10;        // When&#10;        List&lt;Tipo&gt; resultado = tipoServicio.listar();&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        assertEquals(&quot;Fijo&quot;, resultado.get(0).getNombre());&#10;        verify(repositorio).findAll(Sort.by(Sort.Direction.ASC, &quot;nombre&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testObtenerExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(tipo));&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.obtener(1);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Fijo&quot;, resultado.getNombre());&#10;        verify(repositorio, times(2)).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void testObtenerNoExistente() {&#10;        // Given&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.obtener(99);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() {&#10;        // Given&#10;        List&lt;Tipo&gt; tipos = Arrays.asList(tipo);&#10;        when(repositorio.buscar(&quot;Fijo&quot;)).thenReturn(tipos);&#10;&#10;        // When&#10;        List&lt;Tipo&gt; resultado = tipoServicio.buscar(&quot;Fijo&quot;);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(1, resultado.size());&#10;        verify(repositorio).buscar(&quot;Fijo&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() {&#10;        // Given&#10;        Tipo nuevoTipo = new Tipo();&#10;        nuevoTipo.setNombre(&quot;Variable&quot;);&#10;        when(repositorio.save(any(Tipo.class))).thenReturn(nuevoTipo);&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.agregar(nuevoTipo);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(0, nuevoTipo.getId());&#10;        verify(repositorio).save(nuevoTipo);&#10;    }&#10;&#10;    @Test&#10;    void testModificarExistente() {&#10;        // Given&#10;        when(repositorio.findById(1)).thenReturn(Optional.of(tipo));&#10;        when(repositorio.save(tipo)).thenReturn(tipo);&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.modificar(tipo);&#10;&#10;        // Then&#10;        assertNotNull(resultado);&#10;        assertEquals(&quot;Fijo&quot;, resultado.getNombre());&#10;        verify(repositorio).findById(1);&#10;        verify(repositorio).save(tipo);&#10;    }&#10;&#10;    @Test&#10;    void testModificarNoExistente() {&#10;        // Given&#10;        tipo.setId(99);&#10;        when(repositorio.findById(99)).thenReturn(Optional.empty());&#10;&#10;        // When&#10;        Tipo resultado = tipoServicio.modificar(tipo);&#10;&#10;        // Then&#10;        assertNull(resultado);&#10;        verify(repositorio).findById(99);&#10;        verify(repositorio, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void testEliminarExitoso() {&#10;        // Given&#10;        doNothing().when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = tipoServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertTrue(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void testEliminarConExcepcion() {&#10;        // Given&#10;        doThrow(new RuntimeException(&quot;Error&quot;)).when(repositorio).deleteById(1);&#10;&#10;        // When&#10;        boolean resultado = tipoServicio.eliminar(1);&#10;&#10;        // Then&#10;        assertFalse(resultado);&#10;        verify(repositorio).deleteById(1);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.0&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;festivos&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;api&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;packaging&gt;pom&lt;/packaging&gt;&#10;&#9;&lt;name&gt;api&lt;/name&gt;&#10;&#9;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;modules&gt;&#10;        &lt;module&gt;dominio&lt;/module&gt;&#10;        &lt;module&gt;core&lt;/module&gt;&#10;        &lt;module&gt;aplicacion&lt;/module&gt;&#10;        &lt;module&gt;infraestructura&lt;/module&gt;&#10;        &lt;module&gt;presentacion&lt;/module&gt;&#10;    &lt;/modules&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;17&lt;/java.version&gt;&#10;&#9;&#9;&lt;sonar.organization&gt;festivos&lt;/sonar.organization&gt;&#10;&#9;&#9;&lt;sonar.host.url&gt;http://localhost:9000&lt;/sonar.host.url&gt;&#10;&#9;&#9;&lt;jacoco.version&gt;0.8.10&lt;/jacoco.version&gt;&#10;&#9;&#9;&lt;!-- Configuración simplificada para SonarQube multi-módulo --&gt;&#10;&#9;&#9;&lt;sonar.java.coveragePlugin&gt;jacoco&lt;/sonar.java.coveragePlugin&gt;&#10;&#9;&#9;&lt;sonar.coverage.jacoco.xmlReportPaths&gt;&#10;&#9;&#9;&#9;**/target/site/jacoco/jacoco.xml,&#10;&#9;&#9;&#9;**/target/site/jacoco-aggregate/jacoco.xml&#10;&#9;&#9;&lt;/sonar.coverage.jacoco.xmlReportPaths&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;mockito-core&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;!-- Dependencias de módulos para agregación de JaCoCo --&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;festivos&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;dominio&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;festivos&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;core&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;festivos&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;aplicacion&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;festivos&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;infraestructura&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;festivos&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;presentacion&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.jacoco&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;${jacoco.version}&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&lt;executions&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;id&gt;prepare-agent&lt;/id&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goal&gt;prepare-agent&lt;/goal&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;id&gt;report&lt;/id&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;phase&gt;test&lt;/phase&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goal&gt;report&lt;/goal&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;id&gt;report-aggregate&lt;/id&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;phase&gt;verify&lt;/phase&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goal&gt;report-aggregate&lt;/goal&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/execution&gt;&#10;&#9;&#9;&#9;&#9;&lt;/executions&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;3.10.0.2594&lt;/version&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;3.0.0-M9&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;includes&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;include&gt;**/*Test.java&lt;/include&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;include&gt;**/*Tests.java&lt;/include&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/includes&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.5.0&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;festivos&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;api&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;packaging&gt;pom&lt;/packaging&gt;&#10;&#9;&lt;name&gt;api&lt;/name&gt;&#10;&#9;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&#10;&#9;&lt;url/&gt;&#10;&#9;&lt;licenses&gt;&#10;&#9;&#9;&lt;license/&gt;&#10;&#9;&lt;/licenses&gt;&#10;&#9;&lt;developers&gt;&#10;&#9;&#9;&lt;developer/&gt;&#10;&#9;&lt;/developers&gt;&#10;&#9;&lt;scm&gt;&#10;&#9;&#9;&lt;connection/&gt;&#10;&#9;&#9;&lt;developerConnection/&gt;&#10;&#9;&#9;&lt;tag/&gt;&#10;&#9;&#9;&lt;url/&gt;&#10;&#9;&lt;/scm&gt;&#10;&#9;&lt;modules&gt;&#10;        &lt;module&gt;dominio&lt;/module&gt;&#10;        &lt;module&gt;core&lt;/module&gt;&#10;        &lt;module&gt;aplicacion&lt;/module&gt;&#10;        &lt;module&gt;infraestructura&lt;/module&gt;&#10;        &lt;module&gt;presentacion&lt;/module&gt;&#10;    &lt;/modules&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;17&lt;/java.version&gt;&#10;&#9;&#9;&lt;sonar.organization&gt;festivos&lt;/sonar.organization&gt;&#10;&#9;&#9;&lt;sonar.host.url&gt;http://localhost:9000&lt;/sonar.host.url&gt;&#10;&#9;&#9;&lt;jacoco.version&gt;0.8.10&lt;/jacoco.version&gt;&#10;&#9;&#9;&lt;!-- Configuración simplificada para SonarQube multi-módulo --&gt;&#10;&#9;&#9;&lt;sonar.java.coveragePlugin&gt;jacoco&lt;/sonar.java.coveragePlugin&gt;&#10;&#9;&#9;&lt;sonar.coverage.jacoco.xmlReportPaths&gt;&#10;&#9;&#9;&#9;**/target/site/jacoco/jacoco.xml,&#10;&#9;&#9;&#9;**/target/site/jacoco-aggregate/jacoco.xml&#10;&#9;&#9;&lt;/sonar.coverage.jacoco.xmlReportPaths&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;mockito-core&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.jacoco&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;${jacoco.version}&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&lt;executions&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;id&gt;prepare-agent&lt;/id&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goal&gt;prepare-agent&lt;/goal&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;id&gt;report&lt;/id&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;phase&gt;test&lt;/phase&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goal&gt;report&lt;/goal&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;execution&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;id&gt;report-aggregate&lt;/id&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;phase&gt;verify&lt;/phase&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;goal&gt;report-aggregate&lt;/goal&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/goals&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/execution&gt;&#10;&#9;&#9;&#9;&#9;&lt;/executions&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;3.10.0.2594&lt;/version&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&#9;&lt;version&gt;3.0.0-M9&lt;/version&gt;&#10;&#9;&#9;&#9;&#9;&lt;configuration&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;includes&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;include&gt;**/*Test.java&lt;/include&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;include&gt;**/*Tests.java&lt;/include&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/includes&gt;&#10;&#9;&#9;&#9;&#9;&lt;/configuration&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/presentacion/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/presentacion/pom.xml" />
              <option name="originalContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;festivos&lt;/groupId&gt;&#10;        &lt;artifactId&gt;api&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;artifactId&gt;presentacion&lt;/artifactId&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;festivos&lt;/groupId&gt; &#10;            &lt;artifactId&gt;dominio&lt;/artifactId&gt;&#10;            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;festivos&lt;/groupId&gt; &#10;            &lt;artifactId&gt;aplicacion&lt;/artifactId&gt;&#10;            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;            &lt;version&gt;2.3.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#13;&#10;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#13;&#10;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#13;&#10;&#13;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#13;&#10;&#13;&#10;    &lt;parent&gt;&#13;&#10;        &lt;groupId&gt;festivos&lt;/groupId&gt;&#13;&#10;        &lt;artifactId&gt;api&lt;/artifactId&gt;&#13;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#13;&#10;    &lt;/parent&gt;&#13;&#10;&#13;&#10;    &lt;artifactId&gt;presentacion&lt;/artifactId&gt;&#13;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#13;&#10;&#13;&#10;    &lt;dependencies&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;festivos&lt;/groupId&gt; &#13;&#10;            &lt;artifactId&gt;dominio&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;festivos&lt;/groupId&gt; &#13;&#10;            &lt;artifactId&gt;aplicacion&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &#13;&#10;        &lt;/dependency&gt;&#13;&#10;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;2.3.0&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#13;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;    &lt;/dependencies&gt;&#13;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/presentacion/src/test/java/ApiApplicationTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/presentacion/src/test/java/ApiApplicationTest.java" />
              <option name="updatedContent" value="package festivos.api.presentacion;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.ActiveProfiles;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;class ApiApplicationTest {&#10;&#10;    @Test&#10;    void contextLoads() {&#10;        // Esta prueba verifica que el contexto de Spring Boot se carga correctamente&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/presentacion/src/test/java/controladores/PaisControladorTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/presentacion/src/test/java/controladores/PaisControladorTest.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package festivos.api.presentacion.controladores;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;&#10;import festivos.api.core.servicios.IPaisServicio;&#10;import festivos.api.dominio.entidades.Pais;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class PaisControladorTest {&#10;&#10;    @Mock&#10;    private IPaisServicio paisServicio;&#10;&#10;    @InjectMocks&#10;    private PaisControlador paisControlador;&#10;&#10;    private MockMvc mockMvc;&#10;    private ObjectMapper objectMapper;&#10;    private Pais pais;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        mockMvc = MockMvcBuilders.standaloneSetup(paisControlador).build();&#10;        objectMapper = new ObjectMapper();&#10;&#10;        pais = new Pais();&#10;        pais.setId(1);&#10;        pais.setNombre(&quot;Colombia&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testListar() throws Exception {&#10;        // Given&#10;        List&lt;Pais&gt; paises = Arrays.asList(pais);&#10;        when(paisServicio.listar()).thenReturn(paises);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/paises/listar&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$[0].nombre&quot;).value(&quot;Colombia&quot;));&#10;&#10;        verify(paisServicio).listar();&#10;    }&#10;&#10;    @Test&#10;    void testObtener() throws Exception {&#10;        // Given&#10;        when(paisServicio.obtener(1)).thenReturn(pais);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/paises/obtener/1&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.nombre&quot;).value(&quot;Colombia&quot;));&#10;&#10;        verify(paisServicio).obtener(1);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() throws Exception {&#10;        // Given&#10;        List&lt;Pais&gt; paises = Arrays.asList(pais);&#10;        when(paisServicio.buscar(&quot;Colombia&quot;)).thenReturn(paises);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/paises/buscar/Colombia&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$[0].nombre&quot;).value(&quot;Colombia&quot;));&#10;&#10;        verify(paisServicio).buscar(&quot;Colombia&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() throws Exception {&#10;        // Given&#10;        when(paisServicio.agregar(any(Pais.class))).thenReturn(pais);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(post(&quot;/api/paises/agregar&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(pais)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.nombre&quot;).value(&quot;Colombia&quot;));&#10;&#10;        verify(paisServicio).agregar(any(Pais.class));&#10;    }&#10;&#10;    @Test&#10;    void testModificar() throws Exception {&#10;        // Given&#10;        when(paisServicio.modificar(any(Pais.class))).thenReturn(pais);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(put(&quot;/api/paises/modificar&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(pais)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.nombre&quot;).value(&quot;Colombia&quot;));&#10;&#10;        verify(paisServicio).modificar(any(Pais.class));&#10;    }&#10;&#10;    @Test&#10;    void testEliminar() throws Exception {&#10;        // Given&#10;        when(paisServicio.eliminar(1)).thenReturn(true);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(delete(&quot;/api/paises/eliminar/1&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(content().string(&quot;true&quot;));&#10;&#10;        verify(paisServicio).eliminar(1);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/presentacion/src/test/java/controladores/TipoControladorTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/presentacion/src/test/java/controladores/TipoControladorTest.java" />
              <option name="originalContent" value="package festivos.api.presentacion.controladores;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;&#10;import festivos.api.core.servicios.ITipoServicio;&#10;import festivos.api.dominio.entidades.Tipo;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class TipoControladorTest {&#10;&#10;    @Mock&#10;    private ITipoServicio tipoServicio;&#10;&#10;    @InjectMocks&#10;    private TipoControlador tipoControlador;&#10;&#10;    private MockMvc mockMvc;&#10;    private ObjectMapper objectMapper;&#10;    private Tipo tipo;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        mockMvc = MockMvcBuilders.standaloneSetup(tipoControlador).build();&#10;        objectMapper = new ObjectMapper();&#10;&#10;        tipo = new Tipo();&#10;        tipo.setId(1);&#10;        tipo.setTipo(&quot;Fijo&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testListar() throws Exception {&#10;        // Given&#10;        List&lt;Tipo&gt; tipos = Arrays.asList(tipo);&#10;        when(tipoServicio.listar()).thenReturn(tipos);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/tipos/listar&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$[0].tipo&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).listar();&#10;    }&#10;&#10;    @Test&#10;    void testObtener() throws Exception {&#10;        // Given&#10;        when(tipoServicio.obtener(1)).thenReturn(tipo);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/tipos/obtener/1&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.tipo&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).obtener(1);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() throws Exception {&#10;        // Given&#10;        List&lt;Tipo&gt; tipos = Arrays.asList(tipo);&#10;        when(tipoServicio.buscar(&quot;Fijo&quot;)).thenReturn(tipos);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/tipos/buscar/Fijo&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$[0].tipo&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).buscar(&quot;Fijo&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() throws Exception {&#10;        // Given&#10;        when(tipoServicio.agregar(any(Tipo.class))).thenReturn(tipo);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(post(&quot;/api/tipos/agregar&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(tipo)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.tipo&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).agregar(any(Tipo.class));&#10;    }&#10;&#10;    @Test&#10;    void testModificar() throws Exception {&#10;        // Given&#10;        when(tipoServicio.modificar(any(Tipo.class))).thenReturn(tipo);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(put(&quot;/api/tipos/modificar&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(tipo)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.tipo&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).modificar(any(Tipo.class));&#10;    }&#10;&#10;    @Test&#10;    void testEliminar() throws Exception {&#10;        // Given&#10;        when(tipoServicio.eliminar(1)).thenReturn(true);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(delete(&quot;/api/tipos/eliminar/1&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(content().string(&quot;true&quot;));&#10;&#10;        verify(tipoServicio).eliminar(1);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package festivos.api.presentacion.controladores;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;&#10;import festivos.api.core.servicios.ITipoServicio;&#10;import festivos.api.dominio.entidades.Tipo;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class TipoControladorTest {&#10;&#10;    @Mock&#10;    private ITipoServicio tipoServicio;&#10;&#10;    @InjectMocks&#10;    private TipoControlador tipoControlador;&#10;&#10;    private MockMvc mockMvc;&#10;    private ObjectMapper objectMapper;&#10;    private Tipo tipo;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        mockMvc = MockMvcBuilders.standaloneSetup(tipoControlador).build();&#10;        objectMapper = new ObjectMapper();&#10;&#10;        tipo = new Tipo();&#10;        tipo.setId(1);&#10;        tipo.setNombre(&quot;Fijo&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testListar() throws Exception {&#10;        // Given&#10;        List&lt;Tipo&gt; tipos = Arrays.asList(tipo);&#10;        when(tipoServicio.listar()).thenReturn(tipos);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/tipos/listar&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$[0].nombre&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).listar();&#10;    }&#10;&#10;    @Test&#10;    void testObtener() throws Exception {&#10;        // Given&#10;        when(tipoServicio.obtener(1)).thenReturn(tipo);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/tipos/obtener/1&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.nombre&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).obtener(1);&#10;    }&#10;&#10;    @Test&#10;    void testBuscar() throws Exception {&#10;        // Given&#10;        List&lt;Tipo&gt; tipos = Arrays.asList(tipo);&#10;        when(tipoServicio.buscar(&quot;Fijo&quot;)).thenReturn(tipos);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(get(&quot;/api/tipos/buscar/Fijo&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$[0].nombre&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).buscar(&quot;Fijo&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testAgregar() throws Exception {&#10;        // Given&#10;        when(tipoServicio.agregar(any(Tipo.class))).thenReturn(tipo);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(post(&quot;/api/tipos/agregar&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(tipo)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.nombre&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).agregar(any(Tipo.class));&#10;    }&#10;&#10;    @Test&#10;    void testModificar() throws Exception {&#10;        // Given&#10;        when(tipoServicio.modificar(any(Tipo.class))).thenReturn(tipo);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(put(&quot;/api/tipos/modificar&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(tipo)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.nombre&quot;).value(&quot;Fijo&quot;));&#10;&#10;        verify(tipoServicio).modificar(any(Tipo.class));&#10;    }&#10;&#10;    @Test&#10;    void testEliminar() throws Exception {&#10;        // Given&#10;        when(tipoServicio.eliminar(1)).thenReturn(true);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(delete(&quot;/api/tipos/eliminar/1&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(content().string(&quot;true&quot;));&#10;&#10;        verify(tipoServicio).eliminar(1);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apiFestivos/presentacion/src/test/resources/application-test.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apiFestivos/presentacion/src/test/resources/application-test.properties" />
              <option name="updatedContent" value="spring.datasource.url=jdbc:h2:mem:testdb&#10;spring.datasource.driverClassName=org.h2.Driver&#10;spring.datasource.username=sa&#10;spring.datasource.password=password&#10;spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&#10;spring.jpa.hibernate.ddl-auto=create-drop&#10;spring.h2.console.enabled=true&#10;logging.level.org.springframework.web=DEBUG" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>